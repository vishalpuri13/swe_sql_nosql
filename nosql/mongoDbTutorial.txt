PART 1: Create Atlas Account
After initiating the database cluster in Atlas you can connect the database to Compass GUI. Use the following connection string:

Step 1.b (optional): If you want to install Compass and use it use the follwong connection string:
mongodb+srv://<adminUsername>:<password>@<clustername>.0woink3.mongodb.net/

Step 1.c. (optional) Connect to Mongo Shell
cd <bin folder location>
mongosh "mongodb+srv://<clustername>.0woink3.mongodb.net/" --apiVersion 1 --username <adminUsername>


PART 2: To deploy an Atlas Cluster. 
Use the following command on the Atlas Terminal after logging in:

root@mongodb: ~$ atlas setup --clusterName myAtlasClusterEDU --provider AWS --currentIp --skipSampleData --username myAtlasDBUser --password myatlas-001 | tee atlas_cluster_details.txt

Database User Username: myAtlasDBUser
Database User Password: myatlas-001

PART 3: Load sample dataset in the Atlas cluster
After deploying the cluster. Use the following command to load sample dataset in the Atlas cluster:

atlas clusters sampleData load myAtlasClusterEDU

PART 4: Create database and collection
use blog

db.createCollection("posts")
db.createCollection("comments")

PART 5: Insert Documents
db.posts.insertOne({name:"ABCD",age:25})
db.posts.insertMany([{name:"DEFG",age:30},{name:"DFDJ",age:34}])

PART 6: Querying and finding Data
db.posts.find()
db.posts.find(age:25)
db.posts.find({age: {$in:[23,25,34]}})
db.posts.find({age:{$gt:30}})  -----Similarly lt for lesser than, gte for greater than or equal to, lte for less than or equal to---

db.accounts.find({ products: "InvestmentFund"}) ---- returns all documents within the products array that contain the specified value----

USING elemMATCH to find all documents that contain the specified subdocument with conditions provided
db.sales.find({items: {$elemMatch: { name: "laptop", price: { $gt: 800 }, quantity: { $gte: 1 } },},})


AND and OR Operators
1. Implicit AND
db.routes.find({ "airline.name": "Southwest Airlines", stops: { $gte: 1 } })

2. OR
db.routes.find({$or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }],})

3. EXPLICIT AND
db.routes.find({$and: [{ $or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }] }, 
			{ $or: [{ "airline.name": "American Airlines" }, { airplane: 320 }] },
  			]})


PART 7: Replace/Update/Delete Documents

1. SINGLE replacement db.collectionname.replaceOne({filterCondition},{replace values}) . Example:

db.books.replaceOne( {_id: ObjectId("6282afeb441a74a98dbbec4e"),},
  {
    title: "Data Science Fundamentals for Python and MongoDB", isbn: "1484235967",
    publishedDate: new Date("2018-5-10"), authors: ["David Paper"], categories: ["Data Science"],
  })


2. UPDATE used to add new field or update an existing field to a document. 

2a. ($set) replaces the value of a field with the specified value. db.collectionname.updateOne({filterCondition},{$set: {replace values}}) . Example:
	db.podcasts.updateOne({_id: ObjectId("5e8f8f8f8f8f8f8f8f8f8f8"),},{$set: {subscribers: 98562,},})


2b. ($push) adds a new value to the existing array field. db.collectionname.updateOne({filterCondition},{$push: {new values}}) . Example:
	db.podcasts.updateOne({ _id: ObjectId("5e8f8f8f8f8f8f8f8f8f8f8") },{ $push: { hosts: "Nic Raboy" } })


2c. UPSERT - used when not sure if filter condition will return a document. If no document exists with the filter condition. It add a new document.
		db.collectionname.updateOne({filterCondition},{$set: {replace values}},{upsert:true}) .  Example:

	db.podcasts.updateOne({ title: "The Developer Hub" },{ $set: { topics: ["databases", "MongoDB"] } },{ upsert: true })


3. findAndModify() - instead of using update and then find, use this. Example:
	db.podcasts.findAndModify({query: { _id: ObjectId("6261a92dfee1ff300dc80bf1") }, update: { $inc: { subscribers: 1 } },new: true,})


4. UPDATE MANY. Example: db.books.updateMany({ publishedDate: { $lt: new Date("2019-01-01") } },{ $set: { status: "LEGACY" } })


5. DELETE ONE:
	db.podcasts.deleteOne({ _id: Objectid("6282c9862acb966e76bbf20a") })

   DELETE MANY:
	db.podcasts.deleteMany({category: “crime”})



PART 8: MODIFYING QUERIES

SORTING

1. // Return data on all music companies, sorted alphabetically from A to Z.
		db.companies.find({ category_code: "music" }).sort({ name: 1 });

2. // Return data on all music companies, sorted alphabetically from A to Z. Ensure consistent sort order
	db.companies.find({ category_code: "music" }).sort({ name: 1, _id: 1 });


LIMITING RESULTS

3. // Return the three music companies with the highest number of employees. Ensure consistent sort order.
	db.companies.find({ category_code: "music" }).sort({ number_of_employees: -1, _id: 1 }).limit(3);
	db.sales.find({ "items.name": { $in: ["laptop", "backpack", "printer paper"] }, "storeLocation": "London", }).sort({ saleDate: -1, }).limit(3);


PROJECTIONS- specific columns of the documents. INCLUSIONS & EXCLUSIONS DON'T WORK SIMULTANEOUSLY EXCEPT _id:

4. // Return all restaurant inspections - INCLUDE business name, result, and _id fields only
	db.inspections.find({ sector: "Restaurant - 818" },{ business_name: 1, result: 1 })

5. // Return all inspections with result of "Pass" or "Warning" - EXCLUDE date and zip code
	db.inspections.find({ result: { $in: ["Pass", "Warning"] } },{ date: 0, "address.zip": 0 })

6. // Return all restaurant inspections -  INCLUDE business name and result fields only, EXCLUDE ID
	db.inspections.find({ sector: "Restaurant - 818" }, { business_name: 1, result: 1, _id: 0 })


COUNTING DOCUMENTS

7. // Count number of docs in trip collection
	db.trips.countDocuments({})

8. // Count number of trips over 120 minutes by subscribers
	db.trips.countDocuments({ tripduration: { $gt: 120 }, usertype: "Subscriber" })


AGGREGATION - $match -filters based on criterion , $group, 

Syntax of pipeline: 		db.collection.aggregate([
    						{$stage1: {{ expression1 },{ expression2 }...},
        					$stage2: {{ expression1 }...}}
						])


1. Using match and group: \\finds the documents with a field named "state" that matches a value "CA" and 
			  \\then groups those documents by the group key "$city" and shows the total number of zip codes in the state of California.
			
				db.zips.aggregate([
					{$match: { state: "CA"}},
					{$group: {_id: "$city",totalZips: { $count : { } }}}
					])


2. Sorting & Limiting in aggregate pipeline: \\find the birds that are sighted furthest North. use location.coordinates.1, noting the schema is { location: { coordinates: [x, y] } }, 
					     \\ where the highest latitude value is the furthest North. The y in the schema represents latitude.

				db.sightings.aggregate([
  						{$sort: {'location.coordinates.1': -1}}, {$limit: 4}])

3. PROJECT, SET AND COUNT & $OUT: \\ The $project stage specifies the fields of the output documents. 
			   \\ 1 means that the field should be included, and 0 means that the field should be supressed. 
			
				db.zips.aggregate([
						{$project: {state:1, zip:1, population:"$pop",_id:0}}
						])


			  \\ The $set stage creates new fields or changes the value of existing fields, and then outputs the documents with the new fields.
				db.zips.aggregate([
						$set: {place: {$concat:["$city",",","$state"]},pop:10000}}
						])


			  \\ The $count stage creates a new document, with the number of documents at that stage in the aggregation pipeline assigned to the specified field name.

				db.sightings.aggregate([{$match: {date: {$gt: ISODate('2022-01-01T00:00:00.000Z'),$lt: ISODate('2023-01-01T00:00:00.000Z')},
    								species_common: 'Eastern Bluebird' }}, 
							{$count: 'bluebird_sightings_2022'} ])

			  \\ The $out stage creates a new collection that contains the documents in this stage of the aggregation pipeline.
			  \\ $out replaces the specified collection if it exists. 

				{ $out: { db: "<output-db>", coll: "<output-collection>" } }




